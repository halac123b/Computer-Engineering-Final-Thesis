<launch>

    <!---USB serial communication between PCB and PC -->
    <arg name="use_gui" default="false"/>
    <arg name="robot_model" default="astra" doc="robot_model type [astra,camera]"/>

    <!-- Get camera device service -->
    <!-- Tạo server service thuộc mode camera nào đang được sử dụng -->
    <node pkg="transbot_bringup" type="DeviceSrv.py" name="DeviceSrv" output="screen"/>

    <!-- Low-level driver node -->
    <node pkg="transbot_bringup" type="transbot_driver.py" name="transbot_node" required="true" output="screen">
        <param name="imu" value="/transbot/imu"/>
        <param name="vel" value="/transbot/get_vel"/>
    </node>

    <!-- // Library of ROS -->

    <!-- Simulation model -->
    <!-- <param name="robot_description"
           command="$(find xacro)/xacro '$(find transbot_description)/urdf/transbot_$(arg robot_model).urdf'"/>
    <group if="$(arg use_gui)">
        <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"/>
    </group> -->

    <!-- GUI adjustable interface -->
    <!-- <group unless="$(arg use_gui)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    </group>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/> -->

    <!-- Filter and fuse imu data -->
    <!-- <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filte<launch>

    <!---USB serial communication between PCB and PC -->
    <arg name="use_gui" default="false"/>
    <arg name="robot_model" default="astra" doc="robot_model type [astra,camera]"/>

    <!-- Get camera device service -->
    <!-- Tạo server service thuộc mode camera nào đang được sử dụng -->
    <node pkg="transbot_bringup" type="DeviceSrv.py" name="DeviceSrv" output="screen"/>

    <!-- Low-level driver node -->
    <node pkg="transbot_bringup" type="transbot_driver.py" name="transbot_node" required="true" output="screen">
        <param name="imu" value="/transbot/imu"/>
        <param name="vel" value="/transbot/get_vel"/>
    </node>

    <!-- // Library of ROS -->

    <!-- Simulation model -->
    <!-- <param name="robot_description"
           command="$(find xacro)/xacro '$(find transbot_description)/urdf/transbot_$(arg robot_model).urdf'"/>
    <group if="$(arg use_gui)">
        <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"/>
    </group> -->

    <!-- GUI adjustable interface -->
    <!-- <group unless="$(arg use_gui)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    </group>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/> -->

    <!-- Filter and fuse imu data -->
    <!-- <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick" output="screen" respawn="false">
        <param name="fixed_frame" value="base_link"/>
        <param name="use_mag" value="fasle"/>
        <param name="publish_tf" value="false"/>
        <param name="use_magnetic_field_msg" value="fasle"/>
        <param name="world_frame" value="enu"/>
        <param name="orientation_stddev" value="0.05"/>
        <param name="angular_scale" value="1.08"/>
    </node> -->

    <!-- Post static coordinate system conversion -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_imu_link"
          args="0.0 0 0.02 0 0 0  /base_link /imu_link  100"/> -->

    <!-- Library of ROS // -->

    <!-- Some errors during calibration of imu installation -->
    <node pkg="imu_calib" type="apply_calib" name="apply_calib" output="screen" respawn="false">
        <param name="calib_file" value="$(find transbot_bringup)/param/imu/imu_calib.yaml"/>
        <param name="calibrate_gyros" value="true"/>
    </node>

    <!-- Publish odometer data -->
    <node pkg="transbot_bringup" name="base_node" type="base_node">
        <param name="linear_scale" type="double" value="1.2"/>
    </node>

    <!-- Extended Kalman data fusion -->
    <!-- <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
        <remap from="odometry/filtered" to="odom"/>
        <rosparam command="load" file="$(find transbot_bringup)/param/ekf/robot_localization.yaml"/>
    </node> -->

    <!-- Handle control node -->
    <include file="$(find transbot_ctrl)/launch/transbot_keyboard.launch"/>
</launch>
